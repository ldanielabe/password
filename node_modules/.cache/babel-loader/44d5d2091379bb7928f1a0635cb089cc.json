{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nfunction useCard(isLoader) {\n  _s();\n\n  const [passwords, setPasswords] = useState([]);\n  useEffect(() => {\n    const getPass = async () => {\n      const response = await fetch(`http://localhost:3000/passwords`);\n      const newPass = await response.json();\n\n      if (response.status === 200) {\n        setPasswords(newPass);\n      }\n    };\n\n    getPass();\n  }, [isLoader]);\n\n  function search(input) {\n    let pass = [];\n\n    if (input) {\n      passwords ? passwords.map(password => password.name == input ? pass.add(password) : '') : '';\n      setPasswords(pass);\n    }\n  }\n\n  return {\n    passwords,\n    search\n  };\n}\n\n_s(useCard, \"NxgYPw9srVnq1t6KbCYLJ4TR3bY=\");\n\nexport default useCard;","map":{"version":3,"sources":["C:/xampp/htdocs/prueba-graphicmarket/src/hooks/useCard/index.js"],"names":["useState","useEffect","useCard","isLoader","passwords","setPasswords","getPass","response","fetch","newPass","json","status","search","input","pass","map","password","name","add"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,OAAT,CAAiBC,QAAjB,EAA2B;AAAA;;AACzB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMK,OAAO,GAAG,YAAY;AAC1B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,iCAAF,CAA5B;AACA,YAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;;AACA,UAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AAC3BN,QAAAA,YAAY,CAACI,OAAD,CAAZ;AACD;AACF,KAND;;AAOAH,IAAAA,OAAO;AACR,GATQ,EASN,CAACH,QAAD,CATM,CAAT;;AAWA,WAASS,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,QAAIC,IAAI,GAAG,EAAX;;AACA,QAAID,KAAJ,EAAU;AACRT,MAAAA,SAAS,GAAGA,SAAS,CAACW,GAAV,CAAeC,QAAD,IACxBA,QAAQ,CAACC,IAAT,IAAgBJ,KAAhB,GAAwBC,IAAI,CAACI,GAAL,CAASF,QAAT,CAAxB,GAA6C,EADnC,CAAH,GAEJ,EAFL;AAGAX,MAAAA,YAAY,CAACS,IAAD,CAAZ;AACD;AACF;;AAED,SAAO;AAAEV,IAAAA,SAAF;AAAaQ,IAAAA;AAAb,GAAP;AACD;;GAzBQV,O;;AA2BT,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nfunction useCard(isLoader) {\r\n  const [passwords, setPasswords] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getPass = async () => {\r\n      const response = await fetch(`http://localhost:3000/passwords`);\r\n      const newPass = await response.json();\r\n      if (response.status === 200) {\r\n        setPasswords(newPass);\r\n      }\r\n    };\r\n    getPass();\r\n  }, [isLoader]);\r\n\r\n  function search(input) {\r\n    let pass = [];\r\n    if (input){\r\n      passwords ? passwords.map((password) => (\r\n        password.name== input ? pass.add(password) : ''\r\n      )) : '';\r\n      setPasswords(pass);\r\n    }\r\n  }\r\n\r\n  return { passwords, search };\r\n}\r\n\r\nexport default useCard;\r\n"]},"metadata":{},"sourceType":"module"}