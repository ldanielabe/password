{"ast":null,"code":"var _s = $RefreshSig$();\n\n// Dependecies\nimport React from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { reject } from 'lodash';\nimport moment from 'moment';\n\nfunction useFormulary() {\n  _s();\n\n  const [values, setValues] = React.useState({\n    password: ''\n  });\n\n  const handleChange = prop => event => {\n    setValues({ ...values,\n      [prop]: event.target.value\n    });\n  };\n\n  const handleClickShowPassword = () => {\n    setValues({ ...values,\n      showPassword: !values.showPassword\n    });\n  };\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  const generateKey = () => {\n    setValues.password((Math.random() + 1).toString(36).substring(7));\n  };\n\n  const copyKey = () => {\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n  }; // Form \n\n\n  const {\n    register,\n    handleSubmit,\n    errors,\n    formState,\n    unregister,\n    setValue,\n    getValues,\n    reset,\n    setError,\n    clearError,\n    control,\n    watch\n  } = useForm({\n    mode: \"onBlur\",\n    reValidateMode: \"onBlur\",\n    shouldUnregister: true\n  });\n\n  const onSubmit = async data => {\n    data.password = values.password;\n    data.created_at = moment().format('YYYY-MM-DD h:mm:ss');\n    console.log(\"data\", JSON.stringify(data));\n\n    try {\n      const options = {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }; // Insert new job request\n\n      const response = await fetch('http://localhost:3000/passwords', options);\n      const res = await response.json();\n\n      if (res.status === 200) {\n        setSuccessfully(true);\n      } else {\n        setMessageError(true);\n      }\n    } catch (e) {\n      reject();\n    }\n  };\n\n  return {\n    values,\n    onSubmit,\n    handleChange,\n    handleClickShowPassword,\n    handleMouseDownPassword,\n    register,\n    handleSubmit,\n    errors,\n    generateKey,\n    copyKey\n  };\n}\n\n_s(useFormulary, \"/Jjd0Kf3dv8s9WO2D8rvuHU1Tm4=\", false, function () {\n  return [useForm];\n});\n\nexport default useFormulary;","map":{"version":3,"sources":["C:/xampp/htdocs/prueba-graphicmarket/src/hooks/useForm/index.js"],"names":["React","useForm","reject","moment","useFormulary","values","setValues","useState","password","handleChange","prop","event","target","value","handleClickShowPassword","showPassword","handleMouseDownPassword","preventDefault","generateKey","Math","random","toString","substring","copyKey","document","body","appendChild","textField","select","execCommand","register","handleSubmit","errors","formState","unregister","setValue","getValues","reset","setError","clearError","control","watch","mode","reValidateMode","shouldUnregister","onSubmit","data","created_at","format","console","log","JSON","stringify","options","method","headers","response","fetch","res","json","status","setSuccessfully","setMessageError","e"],"mappings":"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","sourcesContent":["// Dependecies\r\nimport React from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { reject } from 'lodash';\r\nimport moment from 'moment';\r\n\r\nfunction useFormulary() {\r\n\r\n  const [values, setValues] = React.useState({\r\n    password: ''\r\n  });\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const generateKey = () => {\r\n    setValues.password((Math.random() + 1).toString(36).substring(7));\r\n  }\r\n  \r\n  const copyKey = () => {\r\n    document.body.appendChild(textField)\r\n    textField.select()\r\n    document.execCommand('copy')\r\n  }\r\n\r\n // Form \r\n\r\n const {\r\n  register,\r\n  handleSubmit,\r\n  errors,\r\n  formState,\r\n  unregister,\r\n  setValue,\r\n  getValues,\r\n  reset,\r\n  setError,\r\n  clearError,\r\n  control, \r\n  watch\r\n} = useForm({\r\n  mode: \"onBlur\",\r\n  reValidateMode: \"onBlur\",\r\n  shouldUnregister: true\r\n  });  \r\n\r\n  const onSubmit = async (data) => {\r\n    data.password = values.password;\r\n    data.created_at = moment().format('YYYY-MM-DD h:mm:ss');\r\n\r\n    console.log(\"data\", JSON.stringify(data));\r\n    try {\r\n       \r\n\r\n        const options = {\r\n          method: 'POST',\r\n          body: JSON.stringify(data,),\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        };\r\n\r\n        // Insert new job request\r\n        const response = await fetch('http://localhost:3000/passwords', options);\r\n        const res = await response.json();\r\n\r\n        if (res.status === 200) {\r\n          setSuccessfully(true); \r\n        } else {\r\n          setMessageError(true);\r\n        }\r\n    } catch (e) {\r\n      reject();\r\n    }\r\n  };\r\n  return { \r\n    values,\r\n    onSubmit, \r\n    handleChange,\r\n    handleClickShowPassword,\r\n    handleMouseDownPassword,\r\n    register,\r\n    handleSubmit,\r\n    errors,\r\n    generateKey,\r\n    copyKey\r\n  };\r\n}\r\n\r\nexport default useFormulary;\r\n"]},"metadata":{},"sourceType":"module"}